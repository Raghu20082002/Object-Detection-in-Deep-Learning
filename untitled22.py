# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JwRW-r6RThn-oQ4FrzPpD7jQzvVGdEsm
"""

import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.applications import VGG16, ResNet50, MobileNetV2
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, GlobalAveragePooling2D

# Load CIFAR-10 data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalize data
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# One-hot encode labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Function to build and compile models
def build_and_compile_model(base_model, model_name):
    x = Flatten()(base_model.output)
    x = Dense(256, activation='relu')(x)
    x = Dense(10, activation='softmax')(x)
    model = Model(inputs=base_model.input, outputs=x)
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(x_train, y_train, epochs=10, batch_size=64, validation_split=0.2)
    model.save(f'{model_name}_model.h5')

# VGG16 Model
vgg16_base = VGG16(weights=None, include_top=False, input_shape=(32, 32, 3))
build_and_compile_model(vgg16_base, 'vgg16')

# ResNet50 Model
resnet50_base = ResNet50(weights=None, include_top=False, input_shape=(32, 32, 3))
build_and_compile_model(resnet50_base, 'resnet50')

# MobileNetV2 Model
mobilenetv2_base = MobileNetV2(weights=None, include_top=False, input_shape=(32, 32, 3))
build_and_compile_model(mobilenetv2_base, 'mobilenetv2')

# Simplified YOLO-like Model
def build_yolo_like_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Flatten())
    model.add(Dense(256, activation='relu'))
    model.add(Dense(10, activation='softmax'))
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(x_train, y_train, epochs=10, batch_size=64, validation_split=0.2)
    model.save('yolo_like_model.h5')

build_yolo_like_model()

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import load_model
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical

# Load CIFAR-10 test dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalize data
x_test = x_test.astype('float32') / 255.0

# One-hot encode labels
y_test = to_categorical(y_test, 10)

# Load the trained models
vgg16_model = load_model('vgg16_model.h5')
resnet50_model = load_model('resnet50_model.h5')
mobilenetv2_model = load_model('mobilenetv2_model.h5')
yolo_like_model = load_model('yolo_like_model.h5')

# Select a few test images
num_images = 5
test_images = x_test[:num_images]
test_labels = y_test[:num_images]

# Make predictions
vgg16_preds = vgg16_model.predict(test_images)
resnet50_preds = resnet50_model.predict(test_images)
mobilenetv2_preds = mobilenetv2_model.predict(test_images)
yolo_like_preds = yolo_like_model.predict(test_images)

# Convert predictions to class labels
vgg16_labels = np.argmax(vgg16_preds, axis=1)
resnet50_labels = np.argmax(resnet50_preds, axis=1)
mobilenetv2_labels = np.argmax(mobilenetv2_preds, axis=1)
yolo_like_labels = np.argmax(yolo_like_preds, axis=1)

# CIFAR-10 class names
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Visualize predictions
plt.figure(figsize=(12, 10))

for i in range(num_images):
    plt.subplot(num_images, 1, i + 1)
    plt.imshow(test_images[i])
    plt.title(f"True Label: {class_names[np.argmax(test_labels[i])]}\n"
              f"VGG16: {class_names[vgg16_labels[i]]} | "
              f"ResNet50: {class_names[resnet50_labels[i]]} | "
              f"MobileNetV2: {class_names[mobilenetv2_labels[i]]} | "
              f"YOLO-Like: {class_names[yolo_like_labels[i]]}")
    plt.axis('off')

plt.tight_layout()
plt.show()